/*
* generated by Xtext
*/
grammar InternalJPas;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.mcreiseii.jpas.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.mcreiseii.jpas.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.mcreiseii.jpas.services.JPasGrammarAccess;

}

@parser::members {

 	private JPasGrammarAccess grammarAccess;
 	
    public InternalJPasParser(TokenStream input, JPasGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected JPasGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_0()); 
	    }
		lv_program_0_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='program' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getMethodsMethodParserRuleCall_2_0()); 
	    }
		lv_methods_2_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_2_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getVariableDeclarationVariableDeclarationParserRuleCall_3_0()); 
	    }
		lv_variableDeclaration_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"variableDeclaration",
        		lv_variableDeclaration_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getStatementsequenceStatementSequenceParserRuleCall_4_0()); 
	    }
		lv_statementsequence_4_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"statementsequence",
        		lv_statementsequence_4_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)this_dot_5=RULE_DOT
    { 
    newLeafNode(this_dot_5, grammarAccess.getProgramAccess().getDotTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMethodAccess().getFunctionParserRuleCall_0()); 
    }
    this_Function_0=ruleFunction
    { 
        $current = $this_Function_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMethodAccess().getProcedureParserRuleCall_1()); 
    }
    this_Procedure_1=ruleProcedure
    { 
        $current = $this_Procedure_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
    }
this_lbrace_1=RULE_LBRACE
    { 
    newLeafNode(this_lbrace_1, grammarAccess.getFunctionAccess().getLbraceTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_rbrace_3=RULE_RBRACE
    { 
    newLeafNode(this_rbrace_3, grammarAccess.getFunctionAccess().getRbraceTerminalRuleCall_3()); 
    }
this_colon_4=RULE_COLON
    { 
    newLeafNode(this_colon_4, grammarAccess.getFunctionAccess().getColonTerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getReturntypeDatatypeEnumRuleCall_5_0()); 
	    }
		lv_returntype_5_0=ruleDatatype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"returntype",
        		lv_returntype_5_0, 
        		"Datatype");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getVariableDeclarationVariableDeclarationParserRuleCall_6_0()); 
	    }
		lv_variableDeclaration_6_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"variableDeclaration",
        		lv_variableDeclaration_6_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getStatementsequenceStatementSequenceParserRuleCall_7_0()); 
	    }
		lv_statementsequence_7_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"statementsequence",
        		lv_statementsequence_7_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)this_semicolon_8=RULE_SEMICOLON
    { 
    newLeafNode(this_semicolon_8, grammarAccess.getFunctionAccess().getSemicolonTerminalRuleCall_8()); 
    }
)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='procedure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getProcedureKeyword_0());
    }
this_lbrace_1=RULE_LBRACE
    { 
    newLeafNode(this_lbrace_1, grammarAccess.getProcedureAccess().getLbraceTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getParamsProcParamParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleProcParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"ProcParam");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_rbrace_3=RULE_RBRACE
    { 
    newLeafNode(this_rbrace_3, grammarAccess.getProcedureAccess().getRbraceTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getVariableDeclarationVariableDeclarationParserRuleCall_4_0()); 
	    }
		lv_variableDeclaration_4_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"variableDeclaration",
        		lv_variableDeclaration_4_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getStatementsequenceStatementSequenceParserRuleCall_5_0()); 
	    }
		lv_statementsequence_5_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"statementsequence",
        		lv_statementsequence_5_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)this_semicolon_6=RULE_SEMICOLON
    { 
    newLeafNode(this_semicolon_6, grammarAccess.getProcedureAccess().getSemicolonTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleProcParam
entryRuleProcParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcParamRule()); }
	 iv_ruleProcParam=ruleProcParam 
	 { $current=$iv_ruleProcParam.current; } 
	 EOF 
;

// Rule ProcParam
ruleProcParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcParamAccess().getVarKeyword_0());
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcParamAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)this_colon_2=RULE_COLON
    { 
    newLeafNode(this_colon_2, grammarAccess.getProcParamAccess().getColonTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcParamAccess().getTypeDatatypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleDatatype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcParamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Datatype");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_comma_4=RULE_COMMA
    { 
    newLeafNode(this_comma_4, grammarAccess.getProcParamAccess().getCommaTerminalRuleCall_4()); 
    }
)?)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)this_colon_1=RULE_COLON
    { 
    newLeafNode(this_colon_1, grammarAccess.getParamAccess().getColonTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getTypeDatatypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDatatype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Datatype");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_semicolon_3=RULE_SEMICOLON
    { 
    newLeafNode(this_semicolon_3, grammarAccess.getParamAccess().getSemicolonTerminalRuleCall_3()); 
    }
)?)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariablesVariableParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeDatatypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleDatatype		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Datatype");
	        afterParserOrEnumRuleCall();
	    }

)
)this_colon_1=RULE_COLON
    { 
    newLeafNode(this_colon_1, grammarAccess.getVariableAccess().getColonTerminalRuleCall_1()); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(this_semicolon_3=RULE_SEMICOLON
    { 
    newLeafNode(this_semicolon_3, grammarAccess.getVariableAccess().getSemicolonTerminalRuleCall_3()); 
    }
)?)
;





// Entry rule entryRuleStatementSequence
entryRuleStatementSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementSequenceRule()); }
	 iv_ruleStatementSequence=ruleStatementSequence 
	 { $current=$iv_ruleStatementSequence.current; } 
	 EOF 
;

// Rule StatementSequence
ruleStatementSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='begin' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementSequenceAccess().getBeginKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementSequenceAccess().getStatementsStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementSequenceRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='end' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementSequenceAccess().getEndKeyword_2());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0_0()); 
    }
    this_IfStatement_0=ruleIfStatement
    { 
        $current = $this_IfStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_0_1()); 
    }
    this_WhileStatement_1=ruleWhileStatement
    { 
        $current = $this_WhileStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignStatementParserRuleCall_0_2()); 
    }
    this_AssignStatement_2=ruleAssignStatement
    { 
        $current = $this_AssignStatement_2.current; 
        afterParserOrEnumRuleCall();
    }
)this_semicolon_3=RULE_SEMICOLON
    { 
    newLeafNode(this_semicolon_3, grammarAccess.getStatementAccess().getSemicolonTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
this_lbrace_1=RULE_LBRACE
    { 
    newLeafNode(this_lbrace_1, grammarAccess.getIfStatementAccess().getLbraceTerminalRuleCall_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIfStatementAccess().getConditionParserRuleCall_2()); 
    }
    this_Condition_2=ruleCondition
    { 
        $current = $this_Condition_2.current; 
        afterParserOrEnumRuleCall();
    }
this_rbrace_3=RULE_RBRACE
    { 
    newLeafNode(this_rbrace_3, grammarAccess.getIfStatementAccess().getRbraceTerminalRuleCall_3()); 
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getThenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfstatementsStatementSequenceParserRuleCall_5_0()); 
	    }
		lv_ifstatements_5_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifstatements",
        		lv_ifstatements_5_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElsestatementsStatementSequenceParserRuleCall_6_1_0()); 
	    }
		lv_elsestatements_7_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elsestatements",
        		lv_elsestatements_7_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
    }
this_lbrace_1=RULE_LBRACE
    { 
    newLeafNode(this_lbrace_1, grammarAccess.getWhileStatementAccess().getLbraceTerminalRuleCall_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionParserRuleCall_2()); 
    }
    this_Condition_2=ruleCondition
    { 
        $current = $this_Condition_2.current; 
        afterParserOrEnumRuleCall();
    }
this_rbrace_3=RULE_RBRACE
    { 
    newLeafNode(this_rbrace_3, grammarAccess.getWhileStatementAccess().getRbraceTerminalRuleCall_3()); 
    }
	otherlv_4='do' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getDoKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileStatementAccess().getWhilestatementsStatementSequenceParserRuleCall_5_0()); 
	    }
		lv_whilestatements_5_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileStatementRule());
	        }
       		set(
       			$current, 
       			"whilestatements",
        		lv_whilestatements_5_0, 
        		"StatementSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAssignStatement
entryRuleAssignStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignStatementRule()); }
	 iv_ruleAssignStatement=ruleAssignStatement 
	 { $current=$iv_ruleAssignStatement.current; } 
	 EOF 
;

// Rule AssignStatement
ruleAssignStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variable_0_0=RULE_ID
		{
			newLeafNode(lv_variable_0_0, grammarAccess.getAssignStatementAccess().getVariableIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"ID");
	    }

)
)this_assignSym_1=RULE_ASSIGNSYM
    { 
    newLeafNode(this_assignSym_1, grammarAccess.getAssignStatementAccess().getAssignSymTerminalRuleCall_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getAssignStatementAccess().getExpressionParserRuleCall_2()); 
    }
ruleExpression
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getLeftExpressionParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getOperatorOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current.getText(); }  
	 EOF 
;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getFactParserRuleCall_0()); 
    }
    this_Fact_0=ruleFact    {
		$current.merge(this_Fact_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getAsteriskKeyword_1_0_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getSolidusKeyword_1_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getFactParserRuleCall_1_1()); 
    }
    this_Fact_3=ruleFact    {
		$current.merge(this_Fact_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleFact
entryRuleFact returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactRule()); } 
	 iv_ruleFact=ruleFact 
	 { $current=$iv_ruleFact.current.getText(); }  
	 EOF 
;

// Rule Fact
ruleFact returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFactAccess().getTermParserRuleCall_0()); 
    }
    this_Term_0=ruleTerm    {
		$current.merge(this_Term_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactAccess().getPlusSignKeyword_1_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFactAccess().getHyphenMinusKeyword_1_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getFactAccess().getTermParserRuleCall_1_1()); 
    }
    this_Term_3=ruleTerm    {
		$current.merge(this_Term_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleTerm
entryRuleTerm returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current.getText(); }  
	 EOF 
;

// Rule Term
ruleTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getTermAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getTermAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Rule Operator
ruleOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getOperatorAccess().getLessEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAccess().getLessEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getOperatorAccess().getLessorequalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorAccess().getLessorequalEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorAccess().getGreaterEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getOperatorAccess().getGreaterorequalEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorAccess().getGreaterorequalEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getOperatorAccess().getNotequalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorAccess().getNotequalEnumLiteralDeclaration_5()); 
    }
));



// Rule Datatype
ruleDatatype returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='string' 
	{
        $current = grammarAccess.getDatatypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDatatypeAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='boolean' 
	{
        $current = grammarAccess.getDatatypeAccess().getBooleanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDatatypeAccess().getBooleanEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='integer' 
	{
        $current = grammarAccess.getDatatypeAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDatatypeAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='real' 
	{
        $current = grammarAccess.getDatatypeAccess().getFloatEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDatatypeAccess().getFloatEnumLiteralDeclaration_3()); 
    }
));



RULE_ASSIGNSYM : ':=';

RULE_DOT : '.';

RULE_COLON : ':';

RULE_SEMICOLON : ';';

RULE_COMMA : ',';

RULE_LBRACE : '(';

RULE_RBRACE : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


