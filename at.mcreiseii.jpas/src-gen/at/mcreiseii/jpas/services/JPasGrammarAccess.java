/*
* generated by Xtext
*/

package at.mcreiseii.jpas.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JPasGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Model:
		//	program=Program;
		public ParserRule getRule() { return rule; }

		//program=Program
		public Assignment getProgramAssignment() { return cProgramAssignment; }

		//Program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsMethodParserRuleCall_2_0 = (RuleCall)cMethodsAssignment_2.eContents().get(0);
		private final Assignment cVariableDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariableDeclarationAssignment_3.eContents().get(0);
		private final Assignment cStatementsequenceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsequenceStatementSequenceParserRuleCall_4_0 = (RuleCall)cStatementsequenceAssignment_4.eContents().get(0);
		private final RuleCall cDotTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Program:
		//	"program" name=ID methods+=Method* variableDeclaration=VariableDeclaration? statementsequence=StatementSequence dot;
		public ParserRule getRule() { return rule; }

		//"program" name=ID methods+=Method* variableDeclaration=VariableDeclaration? statementsequence=StatementSequence dot
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_2() { return cMethodsAssignment_2; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_2_0() { return cMethodsMethodParserRuleCall_2_0; }

		//variableDeclaration=VariableDeclaration?
		public Assignment getVariableDeclarationAssignment_3() { return cVariableDeclarationAssignment_3; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_3_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_3_0; }

		//statementsequence=StatementSequence
		public Assignment getStatementsequenceAssignment_4() { return cStatementsequenceAssignment_4; }

		//StatementSequence
		public RuleCall getStatementsequenceStatementSequenceParserRuleCall_4_0() { return cStatementsequenceStatementSequenceParserRuleCall_4_0; }

		//dot
		public RuleCall getDotTerminalRuleCall_5() { return cDotTerminalRuleCall_5; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcedureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Method:
		//	Function | Procedure;
		public ParserRule getRule() { return rule; }

		//Function | Procedure
		public Alternatives getAlternatives() { return cAlternatives; }

		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }

		//Procedure
		public RuleCall getProcedureParserRuleCall_1() { return cProcedureParserRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLbraceTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsParamParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final RuleCall cRbraceTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cColonTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cReturntypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturntypeDatatypeEnumRuleCall_5_0 = (RuleCall)cReturntypeAssignment_5.eContents().get(0);
		private final Assignment cVariableDeclarationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_6_0 = (RuleCall)cVariableDeclarationAssignment_6.eContents().get(0);
		private final Assignment cStatementsequenceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementsequenceStatementSequenceParserRuleCall_7_0 = (RuleCall)cStatementsequenceAssignment_7.eContents().get(0);
		private final RuleCall cSemicolonTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Function:
		//	"function" lbrace params+=Param* rbrace colon returntype=Datatype variableDeclaration=VariableDeclaration?
		//	statementsequence=StatementSequence semicolon;
		public ParserRule getRule() { return rule; }

		//"function" lbrace params+=Param* rbrace colon returntype=Datatype variableDeclaration=VariableDeclaration?
		//statementsequence=StatementSequence semicolon
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//lbrace
		public RuleCall getLbraceTerminalRuleCall_1() { return cLbraceTerminalRuleCall_1; }

		//params+=Param*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_0() { return cParamsParamParserRuleCall_2_0; }

		//rbrace
		public RuleCall getRbraceTerminalRuleCall_3() { return cRbraceTerminalRuleCall_3; }

		//colon
		public RuleCall getColonTerminalRuleCall_4() { return cColonTerminalRuleCall_4; }

		//returntype=Datatype
		public Assignment getReturntypeAssignment_5() { return cReturntypeAssignment_5; }

		//Datatype
		public RuleCall getReturntypeDatatypeEnumRuleCall_5_0() { return cReturntypeDatatypeEnumRuleCall_5_0; }

		//variableDeclaration=VariableDeclaration?
		public Assignment getVariableDeclarationAssignment_6() { return cVariableDeclarationAssignment_6; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_6_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_6_0; }

		//statementsequence=StatementSequence
		public Assignment getStatementsequenceAssignment_7() { return cStatementsequenceAssignment_7; }

		//StatementSequence
		public RuleCall getStatementsequenceStatementSequenceParserRuleCall_7_0() { return cStatementsequenceStatementSequenceParserRuleCall_7_0; }

		//semicolon
		public RuleCall getSemicolonTerminalRuleCall_8() { return cSemicolonTerminalRuleCall_8; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLbraceTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsProcParamParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final RuleCall cRbraceTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cVariableDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariableDeclarationVariableDeclarationParserRuleCall_4_0 = (RuleCall)cVariableDeclarationAssignment_4.eContents().get(0);
		private final Assignment cStatementsequenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsequenceStatementSequenceParserRuleCall_5_0 = (RuleCall)cStatementsequenceAssignment_5.eContents().get(0);
		private final RuleCall cSemicolonTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Procedure:
		//	"procedure" lbrace params+=ProcParam* rbrace variableDeclaration=VariableDeclaration?
		//	statementsequence=StatementSequence semicolon;
		public ParserRule getRule() { return rule; }

		//"procedure" lbrace params+=ProcParam* rbrace variableDeclaration=VariableDeclaration?
		//statementsequence=StatementSequence semicolon
		public Group getGroup() { return cGroup; }

		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//lbrace
		public RuleCall getLbraceTerminalRuleCall_1() { return cLbraceTerminalRuleCall_1; }

		//params+=ProcParam*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//ProcParam
		public RuleCall getParamsProcParamParserRuleCall_2_0() { return cParamsProcParamParserRuleCall_2_0; }

		//rbrace
		public RuleCall getRbraceTerminalRuleCall_3() { return cRbraceTerminalRuleCall_3; }

		//variableDeclaration=VariableDeclaration?
		public Assignment getVariableDeclarationAssignment_4() { return cVariableDeclarationAssignment_4; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationVariableDeclarationParserRuleCall_4_0() { return cVariableDeclarationVariableDeclarationParserRuleCall_4_0; }

		//statementsequence=StatementSequence
		public Assignment getStatementsequenceAssignment_5() { return cStatementsequenceAssignment_5; }

		//StatementSequence
		public RuleCall getStatementsequenceStatementSequenceParserRuleCall_5_0() { return cStatementsequenceStatementSequenceParserRuleCall_5_0; }

		//semicolon
		public RuleCall getSemicolonTerminalRuleCall_6() { return cSemicolonTerminalRuleCall_6; }
	}

	public class ProcParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cColonTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDatatypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cCommaTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ProcParam:
		//	"var"? name=ID colon type=Datatype comma?;
		public ParserRule getRule() { return rule; }

		//"var"? name=ID colon type=Datatype comma?
		public Group getGroup() { return cGroup; }

		//"var"?
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//colon
		public RuleCall getColonTerminalRuleCall_2() { return cColonTerminalRuleCall_2; }

		//type=Datatype
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Datatype
		public RuleCall getTypeDatatypeEnumRuleCall_3_0() { return cTypeDatatypeEnumRuleCall_3_0; }

		//comma?
		public RuleCall getCommaTerminalRuleCall_4() { return cCommaTerminalRuleCall_4; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cColonTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDatatypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cSemicolonTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Param:
		//	name=ID colon type=Datatype semicolon?;
		public ParserRule getRule() { return rule; }

		//name=ID colon type=Datatype semicolon?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//colon
		public RuleCall getColonTerminalRuleCall_1() { return cColonTerminalRuleCall_1; }

		//type=Datatype
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Datatype
		public RuleCall getTypeDatatypeEnumRuleCall_2_0() { return cTypeDatatypeEnumRuleCall_2_0; }

		//semicolon?
		public RuleCall getSemicolonTerminalRuleCall_3() { return cSemicolonTerminalRuleCall_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		
		//VariableDeclaration:
		//	"var" variables+=Variable+;
		public ParserRule getRule() { return rule; }

		//"var" variables+=Variable+
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//variables+=Variable+
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_0() { return cVariablesVariableParserRuleCall_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDatatypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cColonTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cSemicolonTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Variable:
		//	type=Datatype colon name=ID semicolon?;
		public ParserRule getRule() { return rule; }

		//type=Datatype colon name=ID semicolon?
		public Group getGroup() { return cGroup; }

		//type=Datatype
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Datatype
		public RuleCall getTypeDatatypeEnumRuleCall_0_0() { return cTypeDatatypeEnumRuleCall_0_0; }

		//colon
		public RuleCall getColonTerminalRuleCall_1() { return cColonTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//semicolon?
		public RuleCall getSemicolonTerminalRuleCall_3() { return cSemicolonTerminalRuleCall_3; }
	}

	public class StatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StatementSequence:
		//	"begin" statements+=Statement* "end";
		public ParserRule getRule() { return rule; }

		//"begin" statements+=Statement* "end"
		public Group getGroup() { return cGroup; }

		//"begin"
		public Keyword getBeginKeyword_0() { return cBeginKeyword_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIfStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWhileStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cAssignStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSemicolonTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement:
		//	(IfStatement | WhileStatement | AssignStatement) semicolon;
		public ParserRule getRule() { return rule; }

		//(IfStatement | WhileStatement | AssignStatement) semicolon
		public Group getGroup() { return cGroup; }

		//IfStatement | WhileStatement | AssignStatement
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0_0() { return cIfStatementParserRuleCall_0_0; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_0_1() { return cWhileStatementParserRuleCall_0_1; }

		//AssignStatement
		public RuleCall getAssignStatementParserRuleCall_0_2() { return cAssignStatementParserRuleCall_0_2; }

		//semicolon
		public RuleCall getSemicolonTerminalRuleCall_1() { return cSemicolonTerminalRuleCall_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLbraceTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRbraceTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfstatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfstatementsStatementSequenceParserRuleCall_5_0 = (RuleCall)cIfstatementsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElsestatementsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElsestatementsStatementSequenceParserRuleCall_6_1_0 = (RuleCall)cElsestatementsAssignment_6_1.eContents().get(0);
		
		//IfStatement:
		//	"if" lbrace Condition rbrace "then" ifstatements=StatementSequence ("else" elsestatements=StatementSequence)?;
		public ParserRule getRule() { return rule; }

		//"if" lbrace Condition rbrace "then" ifstatements=StatementSequence ("else" elsestatements=StatementSequence)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//lbrace
		public RuleCall getLbraceTerminalRuleCall_1() { return cLbraceTerminalRuleCall_1; }

		//Condition
		public RuleCall getConditionParserRuleCall_2() { return cConditionParserRuleCall_2; }

		//rbrace
		public RuleCall getRbraceTerminalRuleCall_3() { return cRbraceTerminalRuleCall_3; }

		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//ifstatements=StatementSequence
		public Assignment getIfstatementsAssignment_5() { return cIfstatementsAssignment_5; }

		//StatementSequence
		public RuleCall getIfstatementsStatementSequenceParserRuleCall_5_0() { return cIfstatementsStatementSequenceParserRuleCall_5_0; }

		//("else" elsestatements=StatementSequence)?
		public Group getGroup_6() { return cGroup_6; }

		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//elsestatements=StatementSequence
		public Assignment getElsestatementsAssignment_6_1() { return cElsestatementsAssignment_6_1; }

		//StatementSequence
		public RuleCall getElsestatementsStatementSequenceParserRuleCall_6_1_0() { return cElsestatementsStatementSequenceParserRuleCall_6_1_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLbraceTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRbraceTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWhilestatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhilestatementsStatementSequenceParserRuleCall_5_0 = (RuleCall)cWhilestatementsAssignment_5.eContents().get(0);
		
		//WhileStatement:
		//	"while" lbrace Condition rbrace "do" whilestatements=StatementSequence?;
		public ParserRule getRule() { return rule; }

		//"while" lbrace Condition rbrace "do" whilestatements=StatementSequence?
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//lbrace
		public RuleCall getLbraceTerminalRuleCall_1() { return cLbraceTerminalRuleCall_1; }

		//Condition
		public RuleCall getConditionParserRuleCall_2() { return cConditionParserRuleCall_2; }

		//rbrace
		public RuleCall getRbraceTerminalRuleCall_3() { return cRbraceTerminalRuleCall_3; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//whilestatements=StatementSequence?
		public Assignment getWhilestatementsAssignment_5() { return cWhilestatementsAssignment_5; }

		//StatementSequence
		public RuleCall getWhilestatementsStatementSequenceParserRuleCall_5_0() { return cWhilestatementsStatementSequenceParserRuleCall_5_0; }
	}

	public class AssignStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cAssignSymTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AssignStatement:
		//	variable=ID assignSym Expression;
		public ParserRule getRule() { return rule; }

		//variable=ID assignSym Expression
		public Group getGroup() { return cGroup; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//assignSym
		public RuleCall getAssignSymTerminalRuleCall_1() { return cAssignSymTerminalRuleCall_1; }

		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Condition:
		//	left=Expression operator=Operator right=Expression;
		public ParserRule getRule() { return rule; }

		//left=Expression operator=Operator right=Expression
		public Group getGroup() { return cGroup; }

		//left=Expression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_0_0() { return cLeftExpressionParserRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//right=Expression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_0() { return cRightExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cFactParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Expression:
		//	Fact (("*" | "/") Fact)?;
		public ParserRule getRule() { return rule; }

		//Fact (("*" | "/") Fact)?
		public Group getGroup() { return cGroup; }

		//Fact
		public RuleCall getFactParserRuleCall_0() { return cFactParserRuleCall_0; }

		//(("*" | "/") Fact)?
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//Fact
		public RuleCall getFactParserRuleCall_1_1() { return cFactParserRuleCall_1_1; }
	}

	public class FactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTermParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Fact:
		//	Term (("+" | "-") Term)?;
		public ParserRule getRule() { return rule; }

		//Term (("+" | "-") Term)?
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//(("+" | "-") Term)?
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//Term
		public RuleCall getTermParserRuleCall_1_1() { return cTermParserRuleCall_1_1; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Term:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessLessThanSignKeyword_1_0 = (Keyword)cLessEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessorequalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessorequalLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessorequalEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterThanSignKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterorequalEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterorequalGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGreaterorequalEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotequalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotequalExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotequalEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Operator:
		//	equal="==" | less="<" | lessorequal="<=" | greater=">" | greaterorequal=">=" | notequal="!=";
		public EnumRule getRule() { return rule; }

		//equal="==" | less="<" | lessorequal="<=" | greater=">" | greaterorequal=">=" | notequal="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//equal="=="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualEqualsSignEqualsSignKeyword_0_0() { return cEqualEqualsSignEqualsSignKeyword_0_0; }

		//less="<"
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_1() { return cLessEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLessLessThanSignKeyword_1_0() { return cLessLessThanSignKeyword_1_0; }

		//lessorequal="<="
		public EnumLiteralDeclaration getLessorequalEnumLiteralDeclaration_2() { return cLessorequalEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessorequalLessThanSignEqualsSignKeyword_2_0() { return cLessorequalLessThanSignEqualsSignKeyword_2_0; }

		//greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_3_0() { return cGreaterGreaterThanSignKeyword_3_0; }

		//greaterorequal=">="
		public EnumLiteralDeclaration getGreaterorequalEnumLiteralDeclaration_4() { return cGreaterorequalEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGreaterorequalGreaterThanSignEqualsSignKeyword_4_0() { return cGreaterorequalGreaterThanSignEqualsSignKeyword_4_0; }

		//notequal="!="
		public EnumLiteralDeclaration getNotequalEnumLiteralDeclaration_5() { return cNotequalEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotequalExclamationMarkEqualsSignKeyword_5_0() { return cNotequalExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class DatatypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Datatype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanBooleanKeyword_1_0 = (Keyword)cBooleanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntegerIntegerKeyword_2_0 = (Keyword)cIntegerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFloatRealKeyword_3_0 = (Keyword)cFloatEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Datatype:
		//	String="string" | Boolean="boolean" | Integer="integer" | Float="real";
		public EnumRule getRule() { return rule; }

		//String="string" | Boolean="boolean" | Integer="integer" | Float="real"
		public Alternatives getAlternatives() { return cAlternatives; }

		//String="string"
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//Boolean="boolean"
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_1() { return cBooleanEnumLiteralDeclaration_1; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_1_0() { return cBooleanBooleanKeyword_1_0; }

		//Integer="integer"
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_2() { return cIntegerEnumLiteralDeclaration_2; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_2_0() { return cIntegerIntegerKeyword_2_0; }

		//Float="real"
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_3() { return cFloatEnumLiteralDeclaration_3; }

		//"real"
		public Keyword getFloatRealKeyword_3_0() { return cFloatRealKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private ProgramElements pProgram;
	private MethodElements pMethod;
	private FunctionElements pFunction;
	private ProcedureElements pProcedure;
	private ProcParamElements pProcParam;
	private ParamElements pParam;
	private VariableDeclarationElements pVariableDeclaration;
	private VariableElements pVariable;
	private StatementSequenceElements pStatementSequence;
	private StatementElements pStatement;
	private IfStatementElements pIfStatement;
	private WhileStatementElements pWhileStatement;
	private AssignStatementElements pAssignStatement;
	private ConditionElements pCondition;
	private ExpressionElements pExpression;
	private FactElements pFact;
	private TermElements pTerm;
	private OperatorElements unknownRuleOperator;
	private DatatypeElements unknownRuleDatatype;
	private TerminalRule tAssignSym;
	private TerminalRule tDot;
	private TerminalRule tColon;
	private TerminalRule tSemicolon;
	private TerminalRule tComma;
	private TerminalRule tLbrace;
	private TerminalRule tRbrace;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JPasGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	program=Program;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Program:
	//	"program" name=ID methods+=Method* variableDeclaration=VariableDeclaration? statementsequence=StatementSequence dot;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Method:
	//	Function | Procedure;
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Function:
	//	"function" lbrace params+=Param* rbrace colon returntype=Datatype variableDeclaration=VariableDeclaration?
	//	statementsequence=StatementSequence semicolon;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Procedure:
	//	"procedure" lbrace params+=ProcParam* rbrace variableDeclaration=VariableDeclaration?
	//	statementsequence=StatementSequence semicolon;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//ProcParam:
	//	"var"? name=ID colon type=Datatype comma?;
	public ProcParamElements getProcParamAccess() {
		return (pProcParam != null) ? pProcParam : (pProcParam = new ProcParamElements());
	}
	
	public ParserRule getProcParamRule() {
		return getProcParamAccess().getRule();
	}

	//Param:
	//	name=ID colon type=Datatype semicolon?;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//VariableDeclaration:
	//	"var" variables+=Variable+;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Variable:
	//	type=Datatype colon name=ID semicolon?;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//StatementSequence:
	//	"begin" statements+=Statement* "end";
	public StatementSequenceElements getStatementSequenceAccess() {
		return (pStatementSequence != null) ? pStatementSequence : (pStatementSequence = new StatementSequenceElements());
	}
	
	public ParserRule getStatementSequenceRule() {
		return getStatementSequenceAccess().getRule();
	}

	//Statement:
	//	(IfStatement | WhileStatement | AssignStatement) semicolon;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//IfStatement:
	//	"if" lbrace Condition rbrace "then" ifstatements=StatementSequence ("else" elsestatements=StatementSequence)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//WhileStatement:
	//	"while" lbrace Condition rbrace "do" whilestatements=StatementSequence?;
	public WhileStatementElements getWhileStatementAccess() {
		return (pWhileStatement != null) ? pWhileStatement : (pWhileStatement = new WhileStatementElements());
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//AssignStatement:
	//	variable=ID assignSym Expression;
	public AssignStatementElements getAssignStatementAccess() {
		return (pAssignStatement != null) ? pAssignStatement : (pAssignStatement = new AssignStatementElements());
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}

	//Condition:
	//	left=Expression operator=Operator right=Expression;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Expression:
	//	Fact (("*" | "/") Fact)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Fact:
	//	Term (("+" | "-") Term)?;
	public FactElements getFactAccess() {
		return (pFact != null) ? pFact : (pFact = new FactElements());
	}
	
	public ParserRule getFactRule() {
		return getFactAccess().getRule();
	}

	//Term:
	//	INT | STRING;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//enum Operator:
	//	equal="==" | less="<" | lessorequal="<=" | greater=">" | greaterorequal=">=" | notequal="!=";
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//enum Datatype:
	//	String="string" | Boolean="boolean" | Integer="integer" | Float="real";
	public DatatypeElements getDatatypeAccess() {
		return (unknownRuleDatatype != null) ? unknownRuleDatatype : (unknownRuleDatatype = new DatatypeElements());
	}
	
	public EnumRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}

	//terminal assignSym:
	//	":=";
	public TerminalRule getAssignSymRule() {
		return (tAssignSym != null) ? tAssignSym : (tAssignSym = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "assignSym"));
	} 

	//terminal dot:
	//	".";
	public TerminalRule getDotRule() {
		return (tDot != null) ? tDot : (tDot = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dot"));
	} 

	//terminal colon:
	//	":";
	public TerminalRule getColonRule() {
		return (tColon != null) ? tColon : (tColon = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "colon"));
	} 

	//terminal semicolon:
	//	";";
	public TerminalRule getSemicolonRule() {
		return (tSemicolon != null) ? tSemicolon : (tSemicolon = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "semicolon"));
	} 

	//terminal comma:
	//	",";
	public TerminalRule getCommaRule() {
		return (tComma != null) ? tComma : (tComma = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "comma"));
	} 

	//terminal lbrace:
	//	"(";
	public TerminalRule getLbraceRule() {
		return (tLbrace != null) ? tLbrace : (tLbrace = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lbrace"));
	} 

	//terminal rbrace:
	//	")";
	public TerminalRule getRbraceRule() {
		return (tRbrace != null) ? tRbrace : (tRbrace = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "rbrace"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
