/*
* generated by Xtext
*/
grammar InternalJPas;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.mcreiseii.jpas.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.mcreiseii.jpas.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.mcreiseii.jpas.services.JPasGrammarAccess;

}

@parser::members {
 
 	private JPasGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JPasGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getProgramAssignment()); }
(rule__Model__ProgramAssignment)
{ after(grammarAccess.getModelAccess().getProgramAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethod
entryRuleMethod 
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodAccess().getAlternatives()); }
(rule__Method__Alternatives)
{ after(grammarAccess.getMethodAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedure
entryRuleProcedure 
:
{ before(grammarAccess.getProcedureRule()); }
	 ruleProcedure
{ after(grammarAccess.getProcedureRule()); } 
	 EOF 
;

// Rule Procedure
ruleProcedure
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcedureAccess().getGroup()); }
(rule__Procedure__Group__0)
{ after(grammarAccess.getProcedureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcParam
entryRuleProcParam 
:
{ before(grammarAccess.getProcParamRule()); }
	 ruleProcParam
{ after(grammarAccess.getProcParamRule()); } 
	 EOF 
;

// Rule ProcParam
ruleProcParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcParamAccess().getGroup()); }
(rule__ProcParam__Group__0)
{ after(grammarAccess.getProcParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParam
entryRuleParam 
:
{ before(grammarAccess.getParamRule()); }
	 ruleParam
{ after(grammarAccess.getParamRule()); } 
	 EOF 
;

// Rule Param
ruleParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamAccess().getGroup()); }
(rule__Param__Group__0)
{ after(grammarAccess.getParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatementSequence
entryRuleStatementSequence 
:
{ before(grammarAccess.getStatementSequenceRule()); }
	 ruleStatementSequence
{ after(grammarAccess.getStatementSequenceRule()); } 
	 EOF 
;

// Rule StatementSequence
ruleStatementSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementSequenceAccess().getGroup()); }
(rule__StatementSequence__Group__0)
{ after(grammarAccess.getStatementSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignStatement
entryRuleAssignStatement 
:
{ before(grammarAccess.getAssignStatementRule()); }
	 ruleAssignStatement
{ after(grammarAccess.getAssignStatementRule()); } 
	 EOF 
;

// Rule AssignStatement
ruleAssignStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignStatementAccess().getGroup()); }
(rule__AssignStatement__Group__0)
{ after(grammarAccess.getAssignStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFact
entryRuleFact 
:
{ before(grammarAccess.getFactRule()); }
	 ruleFact
{ after(grammarAccess.getFactRule()); } 
	 EOF 
;

// Rule Fact
ruleFact
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactAccess().getGroup()); }
(rule__Fact__Group__0)
{ after(grammarAccess.getFactAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Datatype
ruleDatatype
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getAlternatives()); }
(rule__Datatype__Alternatives)
{ after(grammarAccess.getDatatypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Method__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getFunctionAssignment_0()); }
(rule__Method__FunctionAssignment_0)
{ after(grammarAccess.getMethodAccess().getFunctionAssignment_0()); }
)

    |(
{ before(grammarAccess.getMethodAccess().getProcedureAssignment_1()); }
(rule__Method__ProcedureAssignment_1)
{ after(grammarAccess.getMethodAccess().getProcedureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0_0()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_0_1()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignStatementParserRuleCall_0_2()); }
	ruleAssignStatement
{ after(grammarAccess.getStatementAccess().getAssignStatementParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAsteriskKeyword_1_0_0()); }

	'*' 

{ after(grammarAccess.getExpressionAccess().getAsteriskKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSolidusKeyword_1_0_1()); }

	'/' 

{ after(grammarAccess.getExpressionAccess().getSolidusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getPlusSignKeyword_1_0_0()); }

	'+' 

{ after(grammarAccess.getFactAccess().getPlusSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getFactAccess().getHyphenMinusKeyword_1_0_1()); }

	'-' 

{ after(grammarAccess.getFactAccess().getHyphenMinusKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getTermAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getTermAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLessEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessorequalEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLessorequalEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterorequalEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterorequalEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotequalEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getOperatorAccess().getNotequalEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatatypeAccess().getStringEnumLiteralDeclaration_0()); }
(	'string' 
)
{ after(grammarAccess.getDatatypeAccess().getStringEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getBooleanEnumLiteralDeclaration_1()); }
(	'boolean' 
)
{ after(grammarAccess.getDatatypeAccess().getBooleanEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getIntegerEnumLiteralDeclaration_2()); }
(	'integer' 
)
{ after(grammarAccess.getDatatypeAccess().getIntegerEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getDatatypeAccess().getFloatEnumLiteralDeclaration_3()); }
(	'real' 
)
{ after(grammarAccess.getDatatypeAccess().getFloatEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }

	'program' 

{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
(rule__Program__NameAssignment_1)
{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMethodsAssignment_2()); }
(rule__Program__MethodsAssignment_2)*
{ after(grammarAccess.getProgramAccess().getMethodsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getVariableDeclarationAssignment_3()); }
(rule__Program__VariableDeclarationAssignment_3)?
{ after(grammarAccess.getProgramAccess().getVariableDeclarationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatementsequenceAssignment_4()); }
(rule__Program__StatementsequenceAssignment_4)
{ after(grammarAccess.getProgramAccess().getStatementsequenceAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getDotTerminalRuleCall_5()); }
	RULE_DOT
{ after(grammarAccess.getProgramAccess().getDotTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLbraceTerminalRuleCall_2()); }
	RULE_LBRACE
{ after(grammarAccess.getFunctionAccess().getLbraceTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamsAssignment_3()); }
(rule__Function__ParamsAssignment_3)*
{ after(grammarAccess.getFunctionAccess().getParamsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRbraceTerminalRuleCall_4()); }
	RULE_RBRACE
{ after(grammarAccess.getFunctionAccess().getRbraceTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getColonTerminalRuleCall_5()); }
	RULE_COLON
{ after(grammarAccess.getFunctionAccess().getColonTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__6__Impl
	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturntypeAssignment_6()); }
(rule__Function__ReturntypeAssignment_6)
{ after(grammarAccess.getFunctionAccess().getReturntypeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__7__Impl
	rule__Function__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getVariableDeclarationAssignment_7()); }
(rule__Function__VariableDeclarationAssignment_7)?
{ after(grammarAccess.getFunctionAccess().getVariableDeclarationAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__8__Impl
	rule__Function__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getStatementsequenceAssignment_8()); }
(rule__Function__StatementsequenceAssignment_8)
{ after(grammarAccess.getFunctionAccess().getStatementsequenceAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getSemicolonTerminalRuleCall_9()); }
	RULE_SEMICOLON
{ after(grammarAccess.getFunctionAccess().getSemicolonTerminalRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Procedure__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__0__Impl
	rule__Procedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }

	'procedure' 

{ after(grammarAccess.getProcedureAccess().getProcedureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__1__Impl
	rule__Procedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
(rule__Procedure__NameAssignment_1)
{ after(grammarAccess.getProcedureAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__2__Impl
	rule__Procedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getLbraceTerminalRuleCall_2()); }
	RULE_LBRACE
{ after(grammarAccess.getProcedureAccess().getLbraceTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__3__Impl
	rule__Procedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getParamsAssignment_3()); }
(rule__Procedure__ParamsAssignment_3)*
{ after(grammarAccess.getProcedureAccess().getParamsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__4__Impl
	rule__Procedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getRbraceTerminalRuleCall_4()); }
	RULE_RBRACE
{ after(grammarAccess.getProcedureAccess().getRbraceTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__5__Impl
	rule__Procedure__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getVariableDeclarationAssignment_5()); }
(rule__Procedure__VariableDeclarationAssignment_5)?
{ after(grammarAccess.getProcedureAccess().getVariableDeclarationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__6__Impl
	rule__Procedure__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getStatementsequenceAssignment_6()); }
(rule__Procedure__StatementsequenceAssignment_6)
{ after(grammarAccess.getProcedureAccess().getStatementsequenceAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Procedure__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Procedure__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getSemicolonTerminalRuleCall_7()); }
	RULE_SEMICOLON
{ after(grammarAccess.getProcedureAccess().getSemicolonTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ProcParam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcParam__Group__0__Impl
	rule__ProcParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getOutAssignment_0()); }
(rule__ProcParam__OutAssignment_0)?
{ after(grammarAccess.getProcParamAccess().getOutAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcParam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcParam__Group__1__Impl
	rule__ProcParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getNameAssignment_1()); }
(rule__ProcParam__NameAssignment_1)
{ after(grammarAccess.getProcParamAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcParam__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcParam__Group__2__Impl
	rule__ProcParam__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getColonTerminalRuleCall_2()); }
	RULE_COLON
{ after(grammarAccess.getProcParamAccess().getColonTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcParam__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcParam__Group__3__Impl
	rule__ProcParam__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getTypeAssignment_3()); }
(rule__ProcParam__TypeAssignment_3)
{ after(grammarAccess.getProcParamAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcParam__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcParam__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getSemicolonTerminalRuleCall_4()); }
(	RULE_SEMICOLON)?
{ after(grammarAccess.getProcParamAccess().getSemicolonTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Param__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__0__Impl
	rule__Param__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getNameAssignment_0()); }
(rule__Param__NameAssignment_0)
{ after(grammarAccess.getParamAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__1__Impl
	rule__Param__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getColonTerminalRuleCall_1()); }
	RULE_COLON
{ after(grammarAccess.getParamAccess().getColonTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__2__Impl
	rule__Param__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getTypeAssignment_2()); }
(rule__Param__TypeAssignment_2)
{ after(grammarAccess.getParamAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Param__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Param__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Param__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getSemicolonTerminalRuleCall_3()); }
(	RULE_SEMICOLON)?
{ after(grammarAccess.getParamAccess().getSemicolonTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariablesAssignment_1()); }
(rule__VariableDeclaration__VariablesAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getVariablesAssignment_1()); }
)
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariablesAssignment_1()); }
(rule__VariableDeclaration__VariablesAssignment_1)*
{ after(grammarAccess.getVariableDeclarationAccess().getVariablesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_0()); }
(rule__Variable__NameAssignment_0)
{ after(grammarAccess.getVariableAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getColonTerminalRuleCall_1()); }
	RULE_COLON
{ after(grammarAccess.getVariableAccess().getColonTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeAssignment_2()); }
(rule__Variable__TypeAssignment_2)
{ after(grammarAccess.getVariableAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getSemicolonTerminalRuleCall_3()); }
	RULE_SEMICOLON
{ after(grammarAccess.getVariableAccess().getSemicolonTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StatementSequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementSequence__Group__0__Impl
	rule__StatementSequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementSequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementSequenceAccess().getBeginKeyword_0()); }

	'begin' 

{ after(grammarAccess.getStatementSequenceAccess().getBeginKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatementSequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementSequence__Group__1__Impl
	rule__StatementSequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementSequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementSequenceAccess().getStatementsAssignment_1()); }
(rule__StatementSequence__StatementsAssignment_1)*
{ after(grammarAccess.getStatementSequenceAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatementSequence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatementSequence__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementSequence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementSequenceAccess().getEndKeyword_2()); }

	'end' 

{ after(grammarAccess.getStatementSequenceAccess().getEndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
(rule__Statement__Alternatives_0)
{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonTerminalRuleCall_1()); }
	RULE_SEMICOLON
{ after(grammarAccess.getStatementAccess().getSemicolonTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLbraceTerminalRuleCall_1()); }
	RULE_LBRACE
{ after(grammarAccess.getIfStatementAccess().getLbraceTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionParserRuleCall_2()); }
	ruleCondition
{ after(grammarAccess.getIfStatementAccess().getConditionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRbraceTerminalRuleCall_3()); }
	RULE_RBRACE
{ after(grammarAccess.getIfStatementAccess().getRbraceTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfStatementAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfstatementsAssignment_5()); }
(rule__IfStatement__IfstatementsAssignment_5)
{ after(grammarAccess.getIfStatementAccess().getIfstatementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_6()); }
(rule__IfStatement__Group_6__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IfStatement__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__0__Impl
	rule__IfStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElsestatementsAssignment_6_1()); }
(rule__IfStatement__ElsestatementsAssignment_6_1)
{ after(grammarAccess.getIfStatementAccess().getElsestatementsAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getLbraceTerminalRuleCall_1()); }
	RULE_LBRACE
{ after(grammarAccess.getWhileStatementAccess().getLbraceTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionParserRuleCall_2()); }
	ruleCondition
{ after(grammarAccess.getWhileStatementAccess().getConditionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getRbraceTerminalRuleCall_3()); }
	RULE_RBRACE
{ after(grammarAccess.getWhileStatementAccess().getRbraceTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__4__Impl
	rule__WhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getDoKeyword_4()); }

	'do' 

{ after(grammarAccess.getWhileStatementAccess().getDoKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhilestatementsAssignment_5()); }
(rule__WhileStatement__WhilestatementsAssignment_5)?
{ after(grammarAccess.getWhileStatementAccess().getWhilestatementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AssignStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__0__Impl
	rule__AssignStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getVariableAssignment_0()); }
(rule__AssignStatement__VariableAssignment_0)
{ after(grammarAccess.getAssignStatementAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__1__Impl
	rule__AssignStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getAssignSymTerminalRuleCall_1()); }
	RULE_ASSIGNSYM
{ after(grammarAccess.getAssignStatementAccess().getAssignSymTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getExpressionParserRuleCall_2()); }
	ruleExpression
{ after(grammarAccess.getAssignStatementAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getLeftAssignment_0()); }
(rule__Condition__LeftAssignment_0)
{ after(grammarAccess.getConditionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOperatorAssignment_1()); }
(rule__Condition__OperatorAssignment_1)
{ after(grammarAccess.getConditionAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getRightAssignment_2()); }
(rule__Condition__RightAssignment_2)
{ after(grammarAccess.getConditionAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getFactParserRuleCall_0()); }
	ruleFact
{ after(grammarAccess.getExpressionAccess().getFactParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives_1_0()); }
(rule__Expression__Alternatives_1_0)
{ after(grammarAccess.getExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getFactParserRuleCall_1_1()); }
	ruleFact
{ after(grammarAccess.getExpressionAccess().getFactParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fact__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__0__Impl
	rule__Fact__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getTermParserRuleCall_0()); }
	ruleTerm
{ after(grammarAccess.getFactAccess().getTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getGroup_1()); }
(rule__Fact__Group_1__0)?
{ after(grammarAccess.getFactAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fact__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group_1__0__Impl
	rule__Fact__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getAlternatives_1_0()); }
(rule__Fact__Alternatives_1_0)
{ after(grammarAccess.getFactAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fact__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fact__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fact__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactAccess().getTermParserRuleCall_1_1()); }
	ruleTerm
{ after(grammarAccess.getFactAccess().getTermParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ProgramAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_0()); }
	ruleProgram{ after(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__MethodsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMethodsMethodParserRuleCall_2_0()); }
	ruleMethod{ after(grammarAccess.getProgramAccess().getMethodsMethodParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__VariableDeclarationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getVariableDeclarationVariableDeclarationParserRuleCall_3_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getProgramAccess().getVariableDeclarationVariableDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatementsequenceAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatementsequenceStatementSequenceParserRuleCall_4_0()); }
	ruleStatementSequence{ after(grammarAccess.getProgramAccess().getStatementsequenceStatementSequenceParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getFunctionFunctionParserRuleCall_0_0()); }
	ruleFunction{ after(grammarAccess.getMethodAccess().getFunctionFunctionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ProcedureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getProcedureProcedureParserRuleCall_1_0()); }
	ruleProcedure{ after(grammarAccess.getMethodAccess().getProcedureProcedureParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ParamsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_3_0()); }
	ruleParam{ after(grammarAccess.getFunctionAccess().getParamsParamParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturntypeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturntypeDatatypeEnumRuleCall_6_0()); }
	ruleDatatype{ after(grammarAccess.getFunctionAccess().getReturntypeDatatypeEnumRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__VariableDeclarationAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getVariableDeclarationVariableDeclarationParserRuleCall_7_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFunctionAccess().getVariableDeclarationVariableDeclarationParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__StatementsequenceAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getStatementsequenceStatementSequenceParserRuleCall_8_0()); }
	ruleStatementSequence{ after(grammarAccess.getFunctionAccess().getStatementsequenceStatementSequenceParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__ParamsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getParamsProcParamParserRuleCall_3_0()); }
	ruleProcParam{ after(grammarAccess.getProcedureAccess().getParamsProcParamParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__VariableDeclarationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getVariableDeclarationVariableDeclarationParserRuleCall_5_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getProcedureAccess().getVariableDeclarationVariableDeclarationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Procedure__StatementsequenceAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureAccess().getStatementsequenceStatementSequenceParserRuleCall_6_0()); }
	ruleStatementSequence{ after(grammarAccess.getProcedureAccess().getStatementsequenceStatementSequenceParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__OutAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getOutVarKeyword_0_0()); }
(
{ before(grammarAccess.getProcParamAccess().getOutVarKeyword_0_0()); }

	'var' 

{ after(grammarAccess.getProcParamAccess().getOutVarKeyword_0_0()); }
)

{ after(grammarAccess.getProcParamAccess().getOutVarKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcParamAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcParam__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcParamAccess().getTypeDatatypeEnumRuleCall_3_0()); }
	ruleDatatype{ after(grammarAccess.getProcParamAccess().getTypeDatatypeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Param__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamAccess().getTypeDatatypeEnumRuleCall_2_0()); }
	ruleDatatype{ after(grammarAccess.getParamAccess().getTypeDatatypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__VariablesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariablesVariableParserRuleCall_1_0()); }
	ruleVariable{ after(grammarAccess.getVariableDeclarationAccess().getVariablesVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getTypeDatatypeEnumRuleCall_2_0()); }
	ruleDatatype{ after(grammarAccess.getVariableAccess().getTypeDatatypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementSequence__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementSequenceAccess().getStatementsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getStatementSequenceAccess().getStatementsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfstatementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfstatementsStatementSequenceParserRuleCall_5_0()); }
	ruleStatementSequence{ after(grammarAccess.getIfStatementAccess().getIfstatementsStatementSequenceParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElsestatementsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElsestatementsStatementSequenceParserRuleCall_6_1_0()); }
	ruleStatementSequence{ after(grammarAccess.getIfStatementAccess().getElsestatementsStatementSequenceParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__WhilestatementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhilestatementsStatementSequenceParserRuleCall_5_0()); }
	ruleStatementSequence{ after(grammarAccess.getWhileStatementAccess().getWhilestatementsStatementSequenceParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getVariableIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAssignStatementAccess().getVariableIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getLeftExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getConditionAccess().getLeftExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getOperatorOperatorEnumRuleCall_1_0()); }
	ruleOperator{ after(grammarAccess.getConditionAccess().getOperatorOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getRightExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getConditionAccess().getRightExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ASSIGNSYM : ':=';

RULE_DOT : '.';

RULE_COLON : ':';

RULE_SEMICOLON : ';';

RULE_COMMA : ',';

RULE_LBRACE : '(';

RULE_RBRACE : ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


