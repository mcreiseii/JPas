/*
* generated by Xtext
*/
package at.mcreiseii.jpas.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.mcreiseii.jpas.services.JPasGrammarAccess;

public class JPasParser extends AbstractContentAssistParser {
	
	@Inject
	private JPasGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.mcreiseii.jpas.ui.contentassist.antlr.internal.InternalJPasParser createParser() {
		at.mcreiseii.jpas.ui.contentassist.antlr.internal.InternalJPasParser result = new at.mcreiseii.jpas.ui.contentassist.antlr.internal.InternalJPasParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMethodAccess().getAlternatives(), "rule__Method__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
					put(grammarAccess.getExpressionAccess().getAlternatives_1_0(), "rule__Expression__Alternatives_1_0");
					put(grammarAccess.getFactAccess().getAlternatives_1_0(), "rule__Fact__Alternatives_1_0");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getDatatypeAccess().getAlternatives(), "rule__Datatype__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
					put(grammarAccess.getProcParamAccess().getGroup(), "rule__ProcParam__Group__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getStatementSequenceAccess().getGroup(), "rule__StatementSequence__Group__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_6(), "rule__IfStatement__Group_6__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getAssignStatementAccess().getGroup(), "rule__AssignStatement__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getFactAccess().getGroup(), "rule__Fact__Group__0");
					put(grammarAccess.getFactAccess().getGroup_1(), "rule__Fact__Group_1__0");
					put(grammarAccess.getModelAccess().getProgramAssignment(), "rule__Model__ProgramAssignment");
					put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
					put(grammarAccess.getProgramAccess().getMethodsAssignment_2(), "rule__Program__MethodsAssignment_2");
					put(grammarAccess.getProgramAccess().getVariableDeclarationAssignment_3(), "rule__Program__VariableDeclarationAssignment_3");
					put(grammarAccess.getProgramAccess().getStatementsequenceAssignment_4(), "rule__Program__StatementsequenceAssignment_4");
					put(grammarAccess.getMethodAccess().getFunctionAssignment_0(), "rule__Method__FunctionAssignment_0");
					put(grammarAccess.getMethodAccess().getProcedureAssignment_1(), "rule__Method__ProcedureAssignment_1");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_3(), "rule__Function__ParamsAssignment_3");
					put(grammarAccess.getFunctionAccess().getReturntypeAssignment_6(), "rule__Function__ReturntypeAssignment_6");
					put(grammarAccess.getFunctionAccess().getVariableDeclarationAssignment_7(), "rule__Function__VariableDeclarationAssignment_7");
					put(grammarAccess.getFunctionAccess().getStatementsequenceAssignment_8(), "rule__Function__StatementsequenceAssignment_8");
					put(grammarAccess.getProcedureAccess().getNameAssignment_1(), "rule__Procedure__NameAssignment_1");
					put(grammarAccess.getProcedureAccess().getParamsAssignment_3(), "rule__Procedure__ParamsAssignment_3");
					put(grammarAccess.getProcedureAccess().getVariableDeclarationAssignment_5(), "rule__Procedure__VariableDeclarationAssignment_5");
					put(grammarAccess.getProcedureAccess().getStatementsequenceAssignment_6(), "rule__Procedure__StatementsequenceAssignment_6");
					put(grammarAccess.getProcParamAccess().getOutAssignment_0(), "rule__ProcParam__OutAssignment_0");
					put(grammarAccess.getProcParamAccess().getNameAssignment_1(), "rule__ProcParam__NameAssignment_1");
					put(grammarAccess.getProcParamAccess().getTypeAssignment_3(), "rule__ProcParam__TypeAssignment_3");
					put(grammarAccess.getParamAccess().getNameAssignment_0(), "rule__Param__NameAssignment_0");
					put(grammarAccess.getParamAccess().getTypeAssignment_2(), "rule__Param__TypeAssignment_2");
					put(grammarAccess.getVariableDeclarationAccess().getVariablesAssignment_1(), "rule__VariableDeclaration__VariablesAssignment_1");
					put(grammarAccess.getVariableAccess().getNameAssignment_0(), "rule__Variable__NameAssignment_0");
					put(grammarAccess.getVariableAccess().getTypeAssignment_2(), "rule__Variable__TypeAssignment_2");
					put(grammarAccess.getStatementSequenceAccess().getStatementsAssignment_1(), "rule__StatementSequence__StatementsAssignment_1");
					put(grammarAccess.getIfStatementAccess().getIfstatementsAssignment_5(), "rule__IfStatement__IfstatementsAssignment_5");
					put(grammarAccess.getIfStatementAccess().getElsestatementsAssignment_6_1(), "rule__IfStatement__ElsestatementsAssignment_6_1");
					put(grammarAccess.getWhileStatementAccess().getWhilestatementsAssignment_5(), "rule__WhileStatement__WhilestatementsAssignment_5");
					put(grammarAccess.getAssignStatementAccess().getVariableAssignment_0(), "rule__AssignStatement__VariableAssignment_0");
					put(grammarAccess.getConditionAccess().getLeftAssignment_0(), "rule__Condition__LeftAssignment_0");
					put(grammarAccess.getConditionAccess().getOperatorAssignment_1(), "rule__Condition__OperatorAssignment_1");
					put(grammarAccess.getConditionAccess().getRightAssignment_2(), "rule__Condition__RightAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.mcreiseii.jpas.ui.contentassist.antlr.internal.InternalJPasParser typedParser = (at.mcreiseii.jpas.ui.contentassist.antlr.internal.InternalJPasParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JPasGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JPasGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
